---
format:
  dashboard:
    orientation: columns
    scrolling: false
project:
  output-dir: docs/
filters: 
  - shinylive
---
```{r}
#| message: false
#| warning: false
library(ggplot2)
library(lubridate)
library(dplyr)
# quarto add quarto-ext/shinylive
```

```{r}
#| message: false
Computer <- getwd()
MainFolder <- file.path(Computer, "data")
The3L <- list.files(MainFolder, pattern="ApplicationData3L", full.names=TRUE, recursive=TRUE)
The3L <- read.csv(The3L, check.names=FALSE) |> dplyr::mutate(Instrument = "3L")
The4L <- list.files(MainFolder, pattern="ApplicationData4L", full.names=TRUE, recursive=TRUE)
The4L <- read.csv(The4L, check.names=FALSE) |> dplyr::mutate(Instrument = "4L")
The5L <- list.files(MainFolder, pattern="ApplicationData5L", full.names=TRUE, recursive=TRUE)
The5L <- read.csv(The5L, check.names=FALSE) |> dplyr::mutate(Instrument = "5L")
Data <- rbind(The3L, The4L, The5L)
```

```{r}
#| include: false
#| echo: false

Data$DateTime <- ymd_hms(Data$DateTime)

Data <- Data %>% mutate(Weekday = wday(DateTime, label = TRUE, abbr = FALSE),
                 Days_to_Sunday = (wday(DateTime) - 1) %% 7)

Data <- Data %>% mutate(PreviousSunday = DateTime - days(Days_to_Sunday)) %>%
    select(-Weekday, -Days_to_Sunday)

Name <- "AppData.csv"
Outpath <- file.path(MainFolder, Name)

write.csv(Data, Outpath, row.names=FALSE)
```

## All Time {.tabset}

#### 3L

```{r}
The3L <- Luciernaga:::UsagePlot(data=Data, TheInstrument="3L")
```

```{r}
#| viewerHeight: 900
#plotly::ggplotly(The3L)
The3L
```

#### 4L

```{r}
The4L <- Luciernaga:::UsagePlot(data=Data, TheInstrument="4L")
```

```{r}
#| viewerHeight: 900
#plotly::ggplotly(The4L)
The4L
```

#### 5L

```{r}
The5L <- Luciernaga:::UsagePlot(data=Data, TheInstrument="5L")
```

```{r}
#| viewerHeight: 900
#plotly::ggplotly(The5L)
The5L
```

#### Historical

```{r}
#| echo: false
#| include: false
library(shinylive)
```

```{shinylive-r}
#| standalone: true
#| viewerHeight: 450

webr::install("dplyr")
webr::install("ggplot2")
webr::install("lubridate")

library(shiny)
library(dplyr)
library(ggplot2)
library(lubridate)

ui <- fluidPage(
  fluidRow(
    column(6,
           fluidRow(
             column(12, align = "center",
                    dateInput("date", label = "Select Date:", value = Sys.Date())
             )
           ),
           fluidRow(
             column(12, align = "center",
                    actionButton("btn_3L", label = "3L"),
                    actionButton("btn_4L", label = "4L"),
                    actionButton("btn_5L", label = "5L")
             )
           ),
           fluidRow(
             column(12, align = "center",
                    actionButton("render", label = "Render Output")
             )
           ),
           # Output Section
           fluidRow(
             column(12,
                    plotOutput("qc_plot")
             )
           )
    )
  )
)

server <- function(input, output, session) {
  
  data_path <-                                                
    paste(                                                  
      "https://raw.githubusercontent.com",                  
      "UMGCCFCSS", "InstrumentQC",                   
      "main", "data", "AppData.csv",                              
      sep = "/"                                             
    ) 
  
  Data <- read.csv(data_path, check.names = FALSE)
  Data$DateTime <- ymd_hms(Data$DateTime)
  Data$PreviousSunday <- as.Date(Data$PreviousSunday) 
  Data <- Data %>% mutate(Date = as.Date(DateTime))
  
  function_path <-                                               
    paste(                                                  
      "https://raw.githubusercontent.com",                  
      "DavidRach", "Luciernaga",                   
      "master", "R", "DashboardHelpers.R",                              
      sep = "/"                                             
    )
  source(function_path)
  
  selected_instrument <- reactiveVal()
  
  observeEvent(input$btn_3L, { selected_instrument("3L") })
  observeEvent(input$btn_4L, { selected_instrument("4L") })
  observeEvent(input$btn_5L, { selected_instrument("5L") })

  table_data <- eventReactive(input$render, {
    req(input$date, selected_instrument())
    
    InstrumentSubset <- Data %>% filter(Instrument == selected_instrument())
    TheSunday <- InstrumentSubset %>% filter(Date == input$date) %>%
       pull(PreviousSunday) %>% unique()
    DateSubset <- InstrumentSubset %>% filter(PreviousSunday == TheSunday)
    
    if (nrow(DateSubset) > 0) {
      UsagePlot(data=DateSubset, TheInstrument=selected_instrument())
    } else {
      NULL
    }
  })

  output$qc_plot <- renderPlot({
    req(table_data())
    table_data()
  })
}

app <- shinyApp(ui = ui, server = server)
```