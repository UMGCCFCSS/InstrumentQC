---
format:
  dashboard:
    orientation: columns
    scrolling: true
---

```{r}
#| message: FALSE
library(flowCore)
library(dplyr)
library(purrr)
library(stringr)
library(plotly)
library(Luciernaga)

Computer <- getwd()
MainFolder <- file.path(Computer, "data")
TheList <- c("Canto")

#MainFolder <- "/home/david/Documents/InstrumentQC/data"

CSTGates <- file.path(Computer, "Gates.csv")

# Updating Data (Work through later)
walk(.x=TheList, .f=Luciernaga:::HolisticQCParse, MainFolder=MainFolder, Template=CSTGates, subsets="Staining")
```

```{r}
CantoData <- Luciernaga:::CurrentData(x=TheList, MainFolder=MainFolder, type = "Both")
TheDate <- CantoData %>% slice(1) %>% pull(DATE)
```

```{r}
WindowOfInterest <- Sys.time() - months(12)

Both_Canto <- CantoData %>% filter(DateTime >= WindowOfInterest)
```

```{r}
Data <- read.csv("AuroraMaintenance.csv", check.names=FALSE)

Data <- Data %>% filter(!str_detect(reason, "lean"))

RepairCanto <- Data %>% filter(instrument %in% "Canto")

Maintenance <- RepairCanto
```


```{r}
x <- Both_Canto
TheColumns <- x %>% select(where(~is.numeric(.)||is.integer(.))) %>% colnames()
TheColumns <- setdiff(TheColumns, "TIME")

# MFIs
TheIntermediate <- TheColumns[!str_detect(TheColumns, "Gain")]
TheIntermediate <- TheIntermediate[!str_detect(TheIntermediate, "rCV")]
TheColumnNames <- TheIntermediate[str_detect(TheIntermediate, "-A")]
  
BlueGains <- TheColumnNames[str_detect(TheColumnNames, "^B")]
RedGains <- TheColumnNames[str_detect(TheColumnNames, "^R")]

ScatterGains <- TheIntermediate[str_detect(TheIntermediate, "SC-")]
ScatterGains <- Luciernaga:::ScalePriority(ScatterGains)
LaserGains <- TheIntermediate[str_detect(TheIntermediate, "Laser")]
LaserGains <- Luciernaga:::ColorPriority(LaserGains)
ScalingGains <- TheIntermediate[str_detect(TheIntermediate, "Scaling")]
ScalingGains <- Luciernaga:::ColorPriority(ScalingGains)
OtherGains <- c(ScatterGains, LaserGains, ScalingGains)

BluePlotsMFI <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=BlueGains,
                      plotType = "individual", returntype = "plots",
                      Metadata=NULL, strict = TRUE, YAxisLabel = "MFI",
                      RepairVisits=RepairCanto)                     

RedPlotsMFI <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=RedGains,
                     plotType = "individual", returntype = "plots",
                     Metadata=NULL, strict = TRUE, YAxisLabel = "MFI",
                     RepairVisits=RepairCanto)

ScatterPlotsMFI <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=ScatterGains,
                     plotType = "individual", returntype = "plots",
                     Metadata=NULL, strict = TRUE, YAxisLabel = " ",
                     RepairVisits=RepairCanto)

LaserPlotsMFI <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=LaserGains,
                     plotType = "individual", returntype = "plots",
                     Metadata=NULL, strict = TRUE, YAxisLabel = " ",
                     RepairVisits=RepairCanto)
```

```{r}
x <- Both_Canto
TheColumns <- x %>% select(where(~is.numeric(.)||is.integer(.))) %>% colnames()
TheColumns <- setdiff(TheColumns, c("TIME", "Time_Gain"))

# Gains
TheColumnNames <- TheColumns[str_detect(TheColumns, "Gain")]
TheColumnNames <- TheColumnNames[str_detect(TheColumnNames, "-A")]

BlueGains <- TheColumnNames[str_detect(TheColumnNames, "^B")]
RedGains <- TheColumnNames[str_detect(TheColumnNames, "^R")]

ScatterGains <- TheColumnNames[str_detect(TheColumnNames, "SC-")]
ScatterGains <- Luciernaga:::ScalePriority(ScatterGains)
LaserGains <- TheColumns[str_detect(TheColumns, "Laser")]
LaserGains <- Luciernaga:::ColorPriority(LaserGains)
ScalingGains <- TheColumns[str_detect(TheColumns, "Scaling")]
ScalingGains <- Luciernaga:::ColorPriority(ScalingGains)
OtherGains <- c(ScatterGains, LaserGains, ScalingGains)

BluePlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=BlueGains,
                      plotType = "individual", returntype = "plots", YAxisLabel = "Gain",
                      RepairVisits=RepairCanto)

RedPlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=RedGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = "Gain",
                     RepairVisits=RepairCanto)

ScatterPlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=ScatterGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = " ",
                     RepairVisits=RepairCanto)

LaserPlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=LaserGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = " ",
                     RepairVisits=RepairCanto)

ScalingPlotsGain <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=ScalingGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = " ",
                     RepairVisits=RepairCanto)
```

```{r}
TheColumns <- x %>% select(where(~is.numeric(.)||is.integer(.))) %>% colnames()
TheColumns <- setdiff(TheColumns, "TIME")

# RCVs
TheIntermediate <- TheColumns[!str_detect(TheColumns, "Gain")]
TheIntermediate <- TheIntermediate[str_detect(TheIntermediate, "rCV")]
TheColumnNames <- TheIntermediate[str_detect(TheIntermediate, "-A")]
  
BlueGains <- TheColumnNames[str_detect(TheColumnNames, "^B")]
RedGains <- TheColumnNames[str_detect(TheColumnNames, "^R")]

ScatterGains <- TheIntermediate[str_detect(TheIntermediate, "SC-")]
ScatterGains <- Luciernaga:::ScalePriority(ScatterGains)
LaserGains <- TheIntermediate[str_detect(TheIntermediate, "Laser")]
LaserGains <- Luciernaga:::ColorPriority(LaserGains)
ScalingGains <- TheIntermediate[str_detect(TheIntermediate, "Scaling")]
ScalingGains <- Luciernaga:::ColorPriority(ScalingGains)
OtherGains <- c(ScatterGains, LaserGains, ScalingGains)

BluePlotsRCV <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=BlueGains,
                      plotType = "individual", returntype = "plots", YAxisLabel = "%rCV",
                      RepairVisits=Maintenance)

RedPlotsRCV <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=RedGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = "%rCV",
                     RepairVisits=Maintenance)

ScatterPlotsRCV <- QC_Plots(x=x, FailedFlag=FALSE, MeasurementType=ScatterGains,
                     plotType = "individual", returntype = "plots", YAxisLabel = " ",
                     RepairVisits=Maintenance)
```

```{r}
#| include: false
#| echo: false
PDFPlots <- c(BluePlotsMFI, RedPlotsMFI, LaserPlotsMFI, ScatterPlotsMFI, BluePlotsGain, RedPlotsGain, ScatterPlotsGain, LaserPlotsGain, ScalingPlotsGain, BluePlotsRCV, RedPlotsRCV, ScatterPlotsRCV)

Filename <- paste0("QCPlots_Canto")

PDF <- Utility_Patchwork(x=PDFPlots, filename=Filename, returntype="pdf", outfolder=MainFolder, thecolumns=1)
```

## {.sidebar}
Dashboard data for the **BD FACSCanto II** last updated on **`r TheDate`**

**First Column: MFI** Median Fluorescent Intensity (MFI) values for the QC beads. Measures stability over time. 

**Second Column: Gain** Gain (Voltage) values set for instrument after QC. Changes over time reflective of laser health. 

**Third Colum: RCV** Percentage change of Robust Coefficient Variation (RCV) after QC. Higher values reflect decreased resolution between positive and negative for that detector. 

For additional information concerning individual parameter tabs, navigate to the [Help](https://umgccfcss.github.io/InstrumentQC/help) page.

**About**

This dashboard contains the visualized QC data for the Cytek and BD cytometers at the [UMGCC FCSS](https://www.medschool.umaryland.edu/cibr/core/umgccc_flow/)

For additional flow cytometry resources, visit our [website](https://sites.google.com/view/umgcccflow/home)

This dashboard was created with [Quarto](https://quarto.org/) and is maintained by [David Rach](https://github.com/DavidRach)


## MFI {.tabset}

```{r}
#| title: Blue
ggplotly(BluePlotsMFI[[1]])
ggplotly(BluePlotsMFI[[2]])
ggplotly(BluePlotsMFI[[3]])
ggplotly(BluePlotsMFI[[4]])
```
```{r}
#| title: Red
ggplotly(RedPlotsMFI[[1]])
ggplotly(RedPlotsMFI[[2]])
```

```{r}
#| title: Scatter
ggplotly(ScatterPlotsMFI[[1]])
ggplotly(ScatterPlotsMFI[[2]])
ggplotly(ScatterPlotsMFI[[3]])
ggplotly(ScatterPlotsMFI[[4]])
ggplotly(ScatterPlotsMFI[[5]])
ggplotly(ScatterPlotsMFI[[6]])
```

```{r}
#| title: LaserDelay
ggplotly(LaserPlotsGain[[1]])
ggplotly(LaserPlotsGain[[2]])
```

```{r}
#| title: LaserScaling
ggplotly(ScalingPlotsGain[[1]])
ggplotly(ScalingPlotsGain[[2]])
```

## Gain {.tabset}

```{r}
#| title: Blue
ggplotly(BluePlotsGain[[1]])
ggplotly(BluePlotsGain[[2]])
ggplotly(BluePlotsGain[[3]])
ggplotly(BluePlotsGain[[4]])
```

```{r}
#| title: Red
ggplotly(RedPlotsGain[[1]])
ggplotly(RedPlotsGain[[2]])
```

```{r}
#| title: Scatter
ggplotly(ScatterPlotsGain[[1]])
ggplotly(BluePlotsGain[[1]])
ggplotly(BluePlotsGain[[1]])
ggplotly(ScatterPlotsGain[[2]])
ggplotly(BluePlotsGain[[1]])
ggplotly(BluePlotsGain[[1]])
```

```{r}
#| title: LaserDelay
ggplotly(LaserPlotsGain[[1]])
ggplotly(LaserPlotsGain[[2]])
```

```{r}
#| title: LaserScaling
ggplotly(ScalingPlotsGain[[1]])
ggplotly(ScalingPlotsGain[[2]])
```

## rCV {.tabset}

```{r}
#| title: Blue
ggplotly(BluePlotsRCV[[1]])
ggplotly(BluePlotsRCV[[2]])
ggplotly(BluePlotsRCV[[3]])
ggplotly(BluePlotsRCV[[4]])
```

```{r}
#| title: Red
ggplotly(RedPlotsRCV[[1]])
ggplotly(RedPlotsRCV[[2]])
```

```{r}
#| title: Scatter
ggplotly(ScatterPlotsRCV[[1]])
ggplotly(ScatterPlotsRCV[[2]])
ggplotly(ScatterPlotsRCV[[3]])
ggplotly(ScatterPlotsRCV[[4]])
ggplotly(ScatterPlotsRCV[[5]])
ggplotly(ScatterPlotsRCV[[6]])
```

```{r}
#| eval: TRUE
#| title: LaserPower
ggplotly(LaserPlotsGain[[1]])
ggplotly(LaserPlotsGain[[2]])
```

```{r}
#| title: LaserScaling
ggplotly(ScalingPlotsGain[[1]])
ggplotly(ScalingPlotsGain[[2]])
```

