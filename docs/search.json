[
  {
    "objectID": "TaskSchedules.html",
    "href": "TaskSchedules.html",
    "title": "3L",
    "section": "",
    "text": "library(utils)\nlibrary(taskscheduleR)\n\n\n3L\n\n# Automated QC\nWorkingDirectory &lt;- file.path(\"C:\", \"DailyQC\", \"InstrumentQC\")\nTheScript &lt;- file.path(WorkingDirectory, \"TheScript_3L.R\")\n\ntaskscheduler_create(taskname = \"QC_3L_Morning\",\n                     rscript=TheScript,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"10:30\")\n\n# Flag Removal\nWorkingDirectory &lt;- file.path(\"C:\", \"DailyQC\", \"InstrumentQC\")\nTheFlagScript &lt;- file.path(WorkingDirectory, \"FlagRemoval.R\")\n\ntaskscheduler_create(taskname = \"FlagRemoval\",\n                     rscript=TheFlagScript,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"13:00\")\n\n# Repo Pull\nWorkingDirectory &lt;- file.path(\"C:\", \"DailyQC\", \"InstrumentQC\")\nTheRepoPull &lt;- file.path(WorkingDirectory, \"RepoPull.R\")\n\ntaskscheduler_create(taskname = \"RepoPull\",\n                     rscript=TheRepoPull,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"06:00\")\n\n#source(\"C:/Users/12692/Documents/ILT_Analysis/TestScheduler1.R\")\n\n#taskscheduler_ls()\n#taskscheduler_delete(\"QC_3L_Morning\")\n\n\n\n4L\n\n# Automated QC\nWorkingDirectory &lt;- file.path(\"C:\", \"DailyQC\", \"InstrumentQC\")\nTheScript &lt;- file.path(WorkingDirectory, \"TheScript_4L.R\")\n\ntaskscheduler_create(taskname = \"QC_4L_Morning\",\n                     rscript=TheScript,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"10:32\")\n\n# Flag Removal\nTheFlagScript &lt;- file.path(WorkingDirectory, \"FlagRemoval.R\")\n\ntaskscheduler_create(taskname = \"FlagRemoval\",\n                     rscript=TheFlagScript,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"13:00\")\n\n# Repo Pull\nTheRepoPull &lt;- file.path(WorkingDirectory, \"RepoPull.R\")\n\ntaskscheduler_create(taskname = \"RepoPull\",\n                     rscript=TheRepoPull,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"06:00\")\n\n#source(\"C:/Users/12692/Documents/ILT_Analysis/TestScheduler1.R\")\n\n#taskscheduler_ls()\n#taskscheduler_delete(\"QC_4L_Morning\")\n\n\n\n5L\n\nWorkingDirectory &lt;- file.path(\"C:\", \"Users\", \"Aurora\", \"Documents\", \"InstrumentQC\")\nTheScript &lt;- file.path(WorkingDirectory, \"TheScript_5L.R\")\n\n# Automated QC\ntaskscheduler_create(taskname = \"QC_5L_Morning\",\n                     rscript=TheScript,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"10:34\")\n\n# Flag Removal\nWorkingDirectory &lt;- file.path(\"C:\", \"Users\", \"Aurora\", \"Documents\", \"InstrumentQC\")\nTheFlagScript &lt;- file.path(WorkingDirectory, \"FlagRemoval.R\")\n\ntaskscheduler_create(taskname = \"FlagRemoval\",\n                     rscript=TheFlagScript,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"13:00\")\n\n#Repo Pull\nWorkingDirectory &lt;- file.path(\"C:\", \"Users\", \"Aurora\", \"Documents\", \"InstrumentQC\")\nTheRepoPull &lt;- file.path(WorkingDirectory, \"RepoPull.R\")\n#source(TheRepoPull)\n\ntaskscheduler_create(taskname = \"RepoPull\",\n                     rscript=TheRepoPull,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"06:00\")\n\n#source(\"C:/Users/12692/Documents/ILT_Analysis/TestScheduler1.R\")\n\n#taskscheduler_ls()\n#taskscheduler_delete(\"QC_5L_Morning\")\n\n\n\nCS\n\n# Automated QC\nMain &lt;- file.path(\"C:\", \"Users\", \"Aurora CS\")\nRepositoryPath &lt;- file.path(Main, \"Documents\", \"InstrumentQC\", \"TheScript_CS.R\")\n\ntaskscheduler_create(taskname = \"QC_CS_Morning\",\n                     rscript=RepositoryPath,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"10:36\")\n\n# Flag Removal\nMain &lt;- file.path(\"C:\", \"Users\", \"Aurora CS\", \"Documents\", \"InstrumentQC\")\nTheFlagScript &lt;- file.path(Main, \"Documents\", \"InstrumentQC\", \"FlagRemoval.R\")\n\ntaskscheduler_create(taskname = \"FlagRemoval\",\n                     rscript=TheFlagScript,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"13:00\")\n\n#Repo Pull\nWorkingDirectory &lt;- file.path(\"C:\", \"Users\", \"Aurora CS\", \"Documents\", \"InstrumentQC\")\nTheRepoPull &lt;- file.path(WorkingDirectory, \"RepoPull.R\")\n\ntaskscheduler_create(taskname = \"RepoPull\",\n                     rscript=TheRepoPull,\n                     schedule=\"DAILY\",\n                     startdate = format(Sys.Date(), \"%m/%d/%Y\"),\n                     starttime = \"06:00\")\n\n#source(TheFlagScript)\n\n#taskscheduler_ls()\n#taskscheduler_delete(\"QC_CS_Morning\")"
  },
  {
    "objectID": "Installation.html",
    "href": "Installation.html",
    "title": "Setting up the Dashboard",
    "section": "",
    "text": "If you would like to implement a similar InstrumentQC dashboard for your own Cytek instruments at your own institution, please continue reading below for the technical details.\nThe data for the dashboard is processed using R. Similarly, the dashboard website itself is built with Quarto and published as a GitHub pages.\nYou will first need to make sure that R, RStudio, Rtools, Quarto and Git are installed on every computer you will be collecting QC data from. Accept the default configurations when setting these softwares up. If you do not have admin privileges to install these software programs, reach out to your IT person.\nIf you don’t already have one setup, you will need to create a GitHub account. The free tier should be fine.\nOnce this is done, sign in and fork the project to your own account. This will copy the folder to your GitHub account where you can start making changes.\nBefore getting started, you will need to set up a Github Token access between your individual computers and your GitHub account. To do so, navigate to…\nTo ensure you can process the data and generate the plots, you will need to install the Luciernaga package and it’s dependencies, as well as a couple tidyverse packages. These can be done as follows…\n\nSetting up the Dashboard\nHaving all the pieces, let’s begin with the dashboard structure.\nEach of the website/dashboards pages is represented by it’s own .qmd file. If you only have one instrument, you would eliminate the uneccessary .qmd files until only the necessary ones are present.\nOnce this is done, you can adjust the code to match number of parameters present.\n\n\nAutomating the Dashboard\nOnce you have customized the .qmd files for your respective instruments, and you have successfully rendered the dashboard and deployed to the GitHub pages, you are at the stage that if so desired you can automate the process and send the data to your GitHub.\nTo do this, we rely on two components. The TaskScheduler is part of your Windows system that schedules when to do updates, etc. We can use this to our advantage and set a particular time for when the files need to be processed and passed to GitHub.\nThe second part is the script. The script is customized for each instruments computer file structure, pointing to the location of the InstrumentQC folder, the folder containing the before and after QC Bead .fcs files, and the DailyQC .csv outputs folder. Once these file paths are specified, and task scheduler set, they will retrieve the data on a daily basis and send."
  },
  {
    "objectID": "help.html",
    "href": "help.html",
    "title": "Types of Measurements",
    "section": "",
    "text": "Gain (similar to voltage on certain cytometers) is a unit by which the detected signal is amplified by for each detector. During the Daily QC, gains are adjusted in order to ensure that the MFI of the instrument is maintained to allow for comparison across experiment days. When a laser starts to wear out, the amount of gain needed to keep the MFI stable will increase.\nWhen a gain for any individual detector is twice that of it’s original baseline gain value, it will be marked as having failed during the Daily QC.\n\n\n\nWhen the robust coefficient of variation (rCV) is low, it’s possible to reproducible discern dim staining populations from each other. When the variance is higher, this ability to discern can be lost.\nCytek defines a detector having failed QC when it’s %rCV fail exceeds 6% for the FSC, UV3, V3, B3, YG3, R3 detectors, or 8% for the SSC detectors. When any of the above occurs, it will be marked as having failed Daily QC.\nWhat about in the case of the other detectors (UV1-UV16, etc.)? While they don’t trigger a Daily QC fail in Cytek’s eyes, they can still impact an experiment. In the context of our dashboard, if a greater than 6% rCV is observed for any of these other detectors, they will be marked by the yellow caution/warning designations.\n\n\n\nThe Mean Fluorescent Intensity (MFI) is based on the measured brightness values across individual detectors for the QC beads acquired during daily QC. Based on these initial MFI results, during Daily QC to Gain is adjusted to ensure that the MFI is stable across time. We can visualize this process by comparing the measurements taken from the before/after QC bead samples.\nWhile Daily QC doesn’t fail due to a change of MFI, we can observe potential issues by checking to see whether the MFI for a given detector is maintained over time, or if it swings wildly over time. This often times coincides with observed QC failure for both the Gain and %rCV measurements."
  },
  {
    "objectID": "help.html#gain",
    "href": "help.html#gain",
    "title": "Types of Measurements",
    "section": "",
    "text": "Gain (similar to voltage on certain cytometers) is a unit by which the detected signal is amplified by for each detector. During the Daily QC, gains are adjusted in order to ensure that the MFI of the instrument is maintained to allow for comparison across experiment days. When a laser starts to wear out, the amount of gain needed to keep the MFI stable will increase.\nWhen a gain for any individual detector is twice that of it’s original baseline gain value, it will be marked as having failed during the Daily QC."
  },
  {
    "objectID": "help.html#rcv",
    "href": "help.html#rcv",
    "title": "Types of Measurements",
    "section": "",
    "text": "When the robust coefficient of variation (rCV) is low, it’s possible to reproducible discern dim staining populations from each other. When the variance is higher, this ability to discern can be lost.\nCytek defines a detector having failed QC when it’s %rCV fail exceeds 6% for the FSC, UV3, V3, B3, YG3, R3 detectors, or 8% for the SSC detectors. When any of the above occurs, it will be marked as having failed Daily QC.\nWhat about in the case of the other detectors (UV1-UV16, etc.)? While they don’t trigger a Daily QC fail in Cytek’s eyes, they can still impact an experiment. In the context of our dashboard, if a greater than 6% rCV is observed for any of these other detectors, they will be marked by the yellow caution/warning designations."
  },
  {
    "objectID": "help.html#mfi",
    "href": "help.html#mfi",
    "title": "Types of Measurements",
    "section": "",
    "text": "The Mean Fluorescent Intensity (MFI) is based on the measured brightness values across individual detectors for the QC beads acquired during daily QC. Based on these initial MFI results, during Daily QC to Gain is adjusted to ensure that the MFI is stable across time. We can visualize this process by comparing the measurements taken from the before/after QC bead samples.\nWhile Daily QC doesn’t fail due to a change of MFI, we can observe potential issues by checking to see whether the MFI for a given detector is maintained over time, or if it swings wildly over time. This often times coincides with observed QC failure for both the Gain and %rCV measurements."
  },
  {
    "objectID": "Examples_FlagRemoval.html",
    "href": "Examples_FlagRemoval.html",
    "title": "UMGCC FCSS",
    "section": "",
    "text": "Please save the below as .R files for each individual computer. This FlagRemoval.R file is then called by source(FlagRemoval.R) in the TaskSchedule process to remove any generated Flag.csv files at the end of the day, resetting the automatic processing for the next day.\n\n# 3L\nMain &lt;- file.path(\"C:\", \"DailyQC\", \"InstrumentQC\")\nAnyFlags &lt;- list.files(Main, pattern=\"Flag.csv\", full.names=TRUE)\n\nif (!length(AnyFlags) == 0){\n  TheCSV &lt;- file.path(Main, \"Flag.csv\")\n  file.remove(TheCSV)\n}\n\n\n# 4L\nMain &lt;- file.path(\"C:\", \"DailyQC\", \"InstrumentQC\")\nAnyFlags &lt;- list.files(Main, pattern=\"Flag.csv\", full.names=TRUE)\n\nif (!length(AnyFlags) == 0){\n  TheCSV &lt;- file.path(Main, \"Flag.csv\")\n  file.remove(TheCSV)\n}\n\n\n# 5L\nMain &lt;- file.path(\"C:\", \"Users\", \"Aurora\", \"Documents\", \"InstrumentQC\")\nAnyFlags &lt;- list.files(Main, pattern=\"Flag.csv\", full.names=TRUE)\n\nif (!length(AnyFlags) == 0){\n  TheCSV &lt;- file.path(Main, \"Flag.csv\")\n  file.remove(TheCSV)\n}\n\n\n# CS\nMain &lt;- file.path(\"C:\", \"Users\", \"Aurora CS\", \"Documents\", \"InstrumentQC\")\nAnyFlags &lt;- list.files(Main, pattern=\"Flag.csv\", full.names=TRUE)\n\nif (!length(AnyFlags) == 0){\n  TheCSV &lt;- file.path(Main, \"Flag.csv\")\n  file.remove(TheCSV)\n}"
  },
  {
    "objectID": "Examples_staff.html",
    "href": "Examples_staff.html",
    "title": "UMGCC FCSS",
    "section": "",
    "text": "To manually send the QC data to the server, please click the green play button below to run the chunk of code. If you see that the success message appears in the console below, you have done so successfully.\n\n#3L\nMain &lt;- file.path(\"C:\", \"DailyQC\", \"InstrumentQC\")\nsetwd(Main)\nTheScript &lt;- file.path(Main, \"TheScript_3L.R\")\nsource(TheScript)\n\nToday &lt;- Sys.time()\nToday &lt;- as.Date(Today)\n\nMain &lt;- file.path(\"C:\", \"DailyQC\", \"InstrumentQC\")\nFlag = data.frame(Flag=Today, Status=\"Success\")\nTheFlag &lt;- file.path(Main, \"Flag.csv\")\nwrite.csv(Flag, TheFlag, row.names=FALSE)\n#file.remove(TheFlag)\n\n\n#4L\n\nMain &lt;- file.path(\"C:\", \"DailyQC\", \"InstrumentQC\")\nsetwd(Main)\nTheScript &lt;- file.path(Main, \"TheScript_4L.R\")\nsource(TheScript)\n\nToday &lt;- Sys.time()\nToday &lt;- as.Date(Today)\n\nMain &lt;- file.path(\"C:\", \"DailyQC\", \"InstrumentQC\")\nFlag = data.frame(Flag=Today, Status=\"Success\")\nTheFlag &lt;- file.path(Main, \"Flag.csv\")\nwrite.csv(Flag, TheFlag, row.names=FALSE)\n#file.remove(TheFlag)\n\n\nMain &lt;- file.path(\"C:\", \"Users\", \"Aurora\", \"Documents\", \"InstrumentQC\")\nsetwd(Main)\nTheScript &lt;- file.path(Main, \"TheScript_5L.R\")\nsource(TheScript)\n\nToday &lt;- Sys.time()\nToday &lt;- as.Date(Today)\n\nMain &lt;- file.path(\"C:\", \"Users\", \"Aurora\", \"Documents\", \"InstrumentQC\")\nFlag = data.frame(Flag=Today, Status=\"Success\")\nTheFlag &lt;- file.path(Main, \"Flag.csv\")\nwrite.csv(Flag, TheFlag, row.names=FALSE)\n#file.remove(TheFlag)\n\nmessage(\"Data Successfully processed\")\n\n\n#CS\nMain &lt;- file.path(\"C:\", \"Users\", \"Aurora CS\", \"Documents\", \"InstrumentQC\")\nsetwd(Main)\nTheScript &lt;- file.path(Main, \"TheScript_CS.R\")\nsource(TheScript)\n\nToday &lt;- Sys.time()\nToday &lt;- as.Date(Today)\n\nMain &lt;- file.path(\"C:\", \"Users\", \"Aurora CS\", \"Documents\", \"InstrumentQC\")\nFlag = data.frame(Flag=Today, Status=\"Success\")\nTheFlag &lt;- file.path(Main, \"Flag.csv\")\nwrite.csv(Flag, TheFlag, row.names=FALSE)\n\nmessage(\"Data successfully sent!\")\n#file.remove(TheFlag)"
  },
  {
    "objectID": "staff.html",
    "href": "staff.html",
    "title": "UMGCC FCSS",
    "section": "",
    "text": "To manually send the QC data to the server, please click the green play button below to run the chunk of code. If you see that the success message appears in the console below, you have done so successfully.\n\nToday &lt;- Sys.time()\nToday &lt;- as.Date(Today)\n\nFlag = data.frame(Flag=Today, Status=\"Success\")\nTheFlag &lt;- file.path(Main, \"Flag.csv\")\nwrite.csv(Flag, TheFlag, row.names=FALSE)\n\nmessage(\"Data successfully sent!\")\n#file.remove(TheFlag)"
  }
]